#!/usr/bin/env bash
# Run this from the root directory

source ./test/approvals.bash

export PATH=.:$PATH

cli=ass

describe "Help texts"
approve "$cli"
approve "$cli --help"

approve "$cli pkd"
approve "$cli pkd --help"

approve "$cli pkd aof"
approve "$cli pkd aof --help"

approve "$cli pkd aof list --help"

approve "$cli pkd proj"
approve "$cli pkd proj --help"

approve "$cli pkd proj list --help"

approve "$cli todo"
approve "$cli todo --help"

approve "$cli todo append --help"

approve "$cli todo get-field --help"

approve "$cli todo get-tag --help"

approve "$cli todo put-field --help"

approve "$cli --version"

describe "pkd aof"
it "can list the areas-of-focus"
export PKD_DIR=$(readlink --canonicalize 'test/resources/pkd')
approve "$cli pkd aof ls" "ass_pkd_aof_ls_env"
unset PKD_DIR
approve "$cli pkd aof ls --pkd-dir='test/resources/pkd'" "ass_pkd_aof_ls_flag"

it "exits early on nonexisting PKD or AREAS"
export PKD_DIR="does/not/exist"
approve "$cli pkd aof ls" "ass_pkd_aof_ls_env_nonexisting"
unset PKD_DIR
approve "$cli pkd aof ls --pkd-dir='does/not/exist'" "ass_pkd_aof_ls_flag_nonexisting"

describe "pkd proj"
it "can list the projects"
export PKD_DIR=$(readlink --canonicalize 'test/resources/pkd')
approve "$cli pkd proj ls" "ass_pkd_proj_ls_env"
unset PKD_DIR
approve "$cli pkd proj ls --pkd-dir='test/resources/pkd'" "ass_pkd_proj_ls_flag"

it "exits early on nonexisting PKD or PROJECTS"
export PKD_DIR=$(readlink --canonicalize 'does/not/exist')
approve "$cli pkd proj ls" "ass_pkd_proj_ls_env_nonexisting"
unset PKD_DIR
approve "$cli pkd proj ls --pkd-dir='does/not/exist'" "ass_pkd_proj_ls_flag_nonexisting"

describe "todo append"
it "can append 'Append test'"

testtodo="$(mktemp --directory --tmpdir='/tmp' 'ass_todo_append.XXXX')"
cp test/resources/todo/* "$testtodo/."
export TODOTXT_FILE="$testtodo/todo.txt"
$cli todo append "Append test ENV"
unset TODOTXT_FILE
approve "cat $testtodo/todo.txt" "ass_todo_append_env"

cp test/resources/todo/* "$testtodo/."
$cli todo append --todotxt-file "$testtodo/todo.txt" "Append test FLAG"
approve "cat $testtodo/todo.txt" "ass_todo_append_flag"

it "exits early if todo.txt is not writeable"
testtodotxt="$(mktemp --tmpdir='/tmp' -- 'todo.txt.XXXX')"
chmod -w $testtodotxt
allow_diff '[0-9A-Za-z]{4}$'
approve "$cli todo append --todotxt-file $testtodotxt 'Append not possible FLAG'" "ass_todo_append_flag_notwriteable"

describe "todo delete"
it "can delete the 1st entry"

testtodo="$(mktemp --directory --tmpdir='/tmp' 'ass_todo_delete.XXXX')"
cp test/resources/todo/* "$testtodo/."

$cli todo delete --todotxt-file "$testtodo/todo.txt" 1
approve "cat $testtodo/todo.txt" "ass_todo_delete_1"

it "exits early if todo.txt is not writeable"
testtodotxt="$(mktemp --tmpdir='/tmp' -- 'todo.txt.XXXX')"
chmod -w $testtodotxt
allow_diff '[0-9A-Za-z]{4}$'
approve "$cli todo delete --todotxt-file $testtodotxt '1'" "ass_todo_delete_flag_notwriteable"

it "cannot delete a line that doesn't exist"
approve "$cli todo delete --todotxt-file $testtodo/todo.txt '10000'" "ass_todo_delete_nonexistententry"

describe "todo get-field"
it "returns the completion status"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-field completion" "ass_todo_get_field_completion_env"
unset TODOTXT_FILE
approve "$cli todo get-field --todotxt-file 'test/resources/todo/todo.txt' completion" "ass_todo_get_field_completion_flag"

it "returns the priority"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-field priority" "ass_todo_get_field_priority_env"
unset TODOTXT_FILE
approve "$cli todo get-field --todotxt-file 'test/resources/todo/todo.txt' priority" "ass_todo_get_field_priority_flag"

it "returns the completion-date"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-field completion-date" "ass_todo_get_field_completion_date_env"
unset TODOTXT_FILE
approve "$cli todo get-field --todotxt-file 'test/resources/todo/todo.txt' completion-date" "ass_todo_get_field_completion_date_flag"

it "returns the creation-date"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-field creation-date" "ass_todo_get_field_creation_date_env"
unset TODOTXT_FILE
approve "$cli todo get-field --todotxt-file 'test/resources/todo/todo.txt' creation-date" "ass_todo_get_field_creation_date_flag"

it "returns the creation-date"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-field creation-date" "ass_todo_get_field_creation_date_env"
unset TODOTXT_FILE
approve "$cli todo get-field --todotxt-file 'test/resources/todo/todo.txt' creation-date" "ass_todo_get_field_creation_date_flag"

it "returns the description"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-field description" "ass_todo_get_field_description_env"
unset TODOTXT_FILE
approve "$cli todo get-field --todotxt-file 'test/resources/todo/todo.txt' description" "ass_todo_get_field_description_flag"

it "returns the project"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-field project" "ass_todo_get_field_project_env"
unset TODOTXT_FILE
approve "$cli todo get-field --todotxt-file 'test/resources/todo/todo.txt' project" "ass_todo_get_field_project_flag"

it "returns the context"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-field context" "ass_todo_get_field_context_env"
unset TODOTXT_FILE
approve "$cli todo get-field --todotxt-file 'test/resources/todo/todo.txt' context" "ass_todo_get_field_context_flag"

it "exits early when todo.txt is not readable"
testtodotxt="$(mktemp --tmpdir='/tmp' -- 'todo.txt.XXXX')"
chmod -r $testtodotxt
allow_diff '[0-9A-Za-z]{4}$'
approve "$cli todo get-field --todotxt-file $testtodotxt completion" "ass_todo_get_field_flag_notreadable"


describe "todo get-tag"
it "returns the aof tag value"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-tag aof" "ass_todo_get_tag_aof_env"
unset TODOTXT_FILE
approve "$cli todo get-tag --todotxt-file 'test/resources/todo/todo.txt' aof" "ass_todo_get_tag_aof_flag"

it "returns the due tag value"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-tag due" "ass_todo_get_tag_due_env"
unset TODOTXT_FILE
approve "$cli todo get-tag --todotxt-file 'test/resources/todo/todo.txt' due" "ass_todo_get_tag_due_flag"

it "returns the t tag value"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-tag t" "ass_todo_get_tag_t_env"
unset TODOTXT_FILE
approve "$cli todo get-tag --todotxt-file 'test/resources/todo/todo.txt' t" "ass_todo_get_tag_t_flag"

it "returns the non-existent tag value"
export TODOTXT_FILE="$(readlink --canonicalize test/resources/todo/todo.txt)"
approve "$cli todo get-tag non-existent" "ass_todo_get_tag_non_existent_env"
unset TODOTXT_FILE
approve "$cli todo get-tag --todotxt-file 'test/resources/todo/todo.txt' non-existent" "ass_todo_get_tag_non_existent_flag"

it "exits early when todo.txt is not readable"
testtodotxt="$(mktemp --tmpdir='/tmp' -- 'todo.txt.XXXX')"
chmod -r $testtodotxt
allow_diff '[0-9A-Za-z]{4}$'
approve "$cli todo get-tag --todotxt-file $testtodotxt due" "ass_todo_get_tag_flag_notreadable"


describe "todo put-field"
it "puts the completion status"
testtodo="$(mktemp --directory --tmpdir='/tmp' 'ass_todo_put_field.XXXX')"
cp test/resources/todo/* "$testtodo/."
export TODOTXT_FILE="$testtodo/todo.txt"
approve "$cli todo put-field completion 'true' :2 3 6:7 11:+2 18:" "ass_todo_put_field_completion_env"
approve "cat $TODOTXT_FILE" "ass_todo_put_field_completion_change"
unset TODOTXT_FILE
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt completion 'false' :4 6 9:10 13:+2 17:" "ass_todo_put_field_completion_flag"
it "validates the completion status value is 'true' or 'false'"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt completion 'non-existent'" "ass_todo_put_field_completion_flag_nonexistent"


it "puts the priority"
testtodo="$(mktemp --directory --tmpdir='/tmp' 'ass_todo_put_field.XXXX')"
cp test/resources/todo/* "$testtodo/."
export TODOTXT_FILE="$testtodo/todo.txt"
approve "$cli todo put-field priority 'A'" "ass_todo_put_field_priority_env"
unset TODOTXT_FILE
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt priority 'Z'" "ass_todo_put_field_priority_flag"
it "validates the priority value matches '[A-Z]'"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt priority 'non-existent'" "ass_todo_put_field_priority_flag_nonexistent"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt priority ''" "ass_todo_put_field_priority_flag_empty"

it "puts the completion date"
testtodo="$(mktemp --directory --tmpdir='/tmp' 'ass_todo_put_field.XXXX')"
cp test/resources/todo/* "$testtodo/."
export TODOTXT_FILE="$testtodo/todo.txt"
approve "$cli todo put-field completion-date '1970-06-06'" "ass_todo_put_field_completion_date_env"
unset TODOTXT_FILE
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt completion-date '1970-07-07'" "ass_todo_put_field_completion_date_flag"
it "validates the completion-date is either empty or a valid date"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt completion-date 'non-existent'" "ass_todo_put_field_completion_date_flag_nonexistent"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt completion-date ''" "ass_todo_put_field_completion_date_flag_empty"

it "puts the creation date"
testtodo="$(mktemp --directory --tmpdir='/tmp' 'ass_todo_put_field.XXXX')"
cp test/resources/todo/* "$testtodo/."
export TODOTXT_FILE="$testtodo/todo.txt"
approve "$cli todo put-field creation-date '1970-08-08'" "ass_todo_put_field_creation_date_env"
unset TODOTXT_FILE
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt creation-date '1970-09-09'" "ass_todo_put_field_creation_date_flag"
it "validates the creation-date is a valid date"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt creation-date 'non-existent'" "ass_todo_put_field_creation_date_flag_nonexistent"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt creation-date ''" "ass_todo_put_field_creation_date_flag_empty"

it "puts the description"
testtodo="$(mktemp --directory --tmpdir='/tmp' 'ass_todo_put_field.XXXX')"
cp test/resources/todo/* "$testtodo/."
export TODOTXT_FILE="$testtodo/todo.txt"
approve "$cli todo put-field description 'Scratch that I want to make pancakes @errands aof:home'" "ass_todo_put_field_description_env"
unset TODOTXT_FILE
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt description ''" "ass_todo_put_field_description_flag"

it "puts the project"
testtodo="$(mktemp --directory --tmpdir='/tmp' 'ass_todo_put_field.XXXX')"
cp test/resources/todo/* "$testtodo/."
export TODOTXT_FILE="$testtodo/todo.txt"
approve "$cli todo put-field project 'project'" "ass_todo_put_field_project_env"
unset TODOTXT_FILE
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt project 'alt-project'" "ass_todo_put_field_project_flag"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt project ''" "ass_todo_put_field_project_flag_empty"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt project 'invalid project'" "ass_todo_put_field_project_flag_invalid"

it "puts the context"
testtodo="$(mktemp --directory --tmpdir='/tmp' 'ass_todo_put_field.XXXX')"
cp test/resources/todo/* "$testtodo/."
export TODOTXT_FILE="$testtodo/todo.txt"
approve "$cli todo put-field context 'context'" "ass_todo_put_field_context_env"
unset TODOTXT_FILE
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt context 'alt-context'" "ass_todo_put_field_context_flag"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt context ''" "ass_todo_put_field_context_flag_empty"
approve "$cli todo put-field --todotxt-file $testtodo/todo.txt context 'invalid context'" "ass_todo_put_field_context_flag_invalid"

it "exits early when todo.txt is not writeable"
testtodotxt="$(mktemp --tmpdir='/tmp' -- 'todo.txt.XXXX')"
chmod -w $testtodotxt
allow_diff '[0-9A-Za-z]{4}$'
approve "$cli todo put-field --todotxt-file $testtodotxt completion 'true'" "ass_todo_put_field_flag_notwriteable"

